/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
!!GlobalInfo
product: Peripherals v11.0
processor: LPC5526
package_id: LPC5526JBD64
mcu_data: ksdk2_0
processor_version: 12.0.0
functionalGroups:
- name: BOARD_InitPeripherals
  UUID: 7c868197-02be-4134-839f-edd1664ccc1a
  called_from_default_init: true
  selectedCore: cm33_core0
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/

/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
component:
- type: 'system'
- type_id: 'system_54b53072540eeeb8f8e9343e71f28176'
- global_system_definitions:
  - user_definitions: ''
  - user_includes: ''
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/

/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
component:
- type: 'uart_cmsis_common'
- type_id: 'uart_cmsis_common_9cb8e302497aa696fdbb5a4fd622c2a8'
- global_USART_CMSIS_common:
  - quick_selection: 'default'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/

/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
component:
- type: 'gpio_adapter_common'
- type_id: 'gpio_adapter_common_57579b9ac814fe26bf95df0a384c36b6'
- global_gpio_adapter_common:
  - quick_selection: 'default'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "peripherals.h"

/***********************************************************************************************************************
 * BOARD_InitPeripherals functional group
 **********************************************************************************************************************/
/***********************************************************************************************************************
 * NVIC initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'NVIC'
- type: 'nvic'
- mode: 'general'
- custom_name_enabled: 'false'
- type_id: 'nvic_57b5eef3774cc60acaede6f5b8bddc67'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'NVIC'
- config_sets:
  - nvic:
    - interrupt_table:
      - 0: []
      - 1: []
    - interrupts: []
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */

/* Empty initialization function (commented out)
static void NVIC_init(void) {
} */

/***********************************************************************************************************************
 * FLEXCOMM0 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'FLEXCOMM0'
- type: 'flexcomm_spi_cmsis'
- mode: 'interrupt'
- custom_name_enabled: 'false'
- type_id: 'flexcomm_spi_cmsis_74324a6ab325d0ce4d9cb55a42811c39'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'FLEXCOMM0'
- config_sets:
  - general:
    - main_config:
      - spi_mode_user: 'ARM_SPI_MODE_INACTIVE'
      - clockSource: 'FXCOMFunctionClock'
      - clockSourceFreq: 'BOARD_BootClockPLL150M'
      - clock_polarity: 'ARM_SPI_CPOL0_CPHA0'
      - power_state: 'ARM_POWER_FULL'
      - slave_select: 'kSPI_Ssel0'
      - enableActivePolarity: 'false'
      - signalEventFunctionId: 'SPI0_SignalEvent'
      - enableGetFreqFnCustomName: 'false'
      - getFreqFunctionCustomID: 'SPI0_GetFreq'
      - enableInitPinsFnCustomName: 'false'
      - initPinFunctionCustomID: 'SPI0_InitPins'
      - enableDeinitPinsFnCustomName: 'false'
      - deinitPinFunctionCustomID: 'SPI0_DeinitPins'
    - quick_selection: 'default'
  - fsl_spi:
    - interrupt:
      - IRQn: 'FLEXCOMM0_IRQn'
      - enable_priority: 'false'
      - priority: '0'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
/* Get clock source frequency */
uint32_t SPI0_GetFreq(void){
  return FLEXCOMM0_CLOCK_SOURCE_FREQ;
};

static void FLEXCOMM0_init(void) {
  /* Initialize CMSIS SPI */
  FLEXCOMM0_PERIPHERAL.Initialize(SPI0_SignalEvent);
  /* Power control of CMSIS SPI */
  FLEXCOMM0_PERIPHERAL.PowerControl(ARM_POWER_FULL);
}

/***********************************************************************************************************************
 * ADC0 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'ADC0'
- type: 'lpadc'
- mode: 'LPADC'
- custom_name_enabled: 'false'
- type_id: 'lpadc_ddcc12878b96237847ab78b571214e1c'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'ADC0'
- config_sets:
  - fsl_lpadc:
    - lpadcConfig:
      - clockSource: 'AsynchronousFunctionClock'
      - clockSourceFreq: 'BOARD_BootClockPLL150M'
      - enableInDozeMode: 'true'
      - conversionAverageMode: 'kLPADC_ConversionAverage128'
      - offsetCalibration: 'yes'
      - autoCalibrate: 'true'
      - enableAnalogPreliminary: 'true'
      - powerUpDelay: '0x80'
      - referenceVoltageSource: 'kLPADC_ReferenceVoltageAlt2'
      - powerLevelMode: 'kLPADC_PowerLevelAlt4'
      - triggerPriorityPolicy: 'kLPADC_TriggerPriorityPreemptSubsequently'
      - enableConvPause: 'false'
      - convPauseDelay: '0'
      - FIFO0Watermark: '0'
      - FIFO1Watermark: '0'
      - FIFO0WatermarkDMA: 'false'
      - FIFO1WatermarkDMA: 'false'
    - lpadcConvCommandConfig:
      - 0:
        - user_commandId: ''
        - commandId: '1'
        - chainedNextCommandNumber: '0'
        - sampleChannelMode: 'kLPADC_SampleChannelSingleEndSideB'
        - channelNumber: 'CH.8'
        - enableAutoChannelIncrement: 'false'
        - loopCount: '0'
        - hardwareAverageMode: 'kLPADC_HardwareAverageCount128'
        - sampleTimeMode: 'kLPADC_SampleTimeADCK131'
        - hardwareCompareMode: 'kLPADC_HardwareCompareDisabled'
        - hardwareCompareValueHigh: '0'
        - hardwareCompareValueLow: '0'
        - conversionResoultuionMode: 'kLPADC_ConversionResolutionHigh'
        - enableWaitTrigger: 'false'
    - lpadcConvTriggerConfig:
      - 0:
        - user_triggerId: ''
        - triggerId: '0'
        - targetCommandId: '1'
        - delayPower: '0'
        - priority: 'false'
        - channelAFIFOSelect: '0'
        - channelBFIFOSelect: '0'
        - enableHardwareTrigger: 'false'
    - IRQ_cfg:
      - interrupt_type: ''
      - enable_irq: 'false'
      - adc_interrupt:
        - IRQn: 'ADC0_IRQn'
        - enable_interrrupt: 'enabled'
        - enable_priority: 'false'
        - priority: '0'
        - enable_custom_name: 'false'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const lpadc_config_t ADC0_config = {
  .enableInDozeMode = true,
  .conversionAverageMode = kLPADC_ConversionAverage128,
  .enableAnalogPreliminary = true,
  .powerUpDelay = 0x80UL,
  .referenceVoltageSource = kLPADC_ReferenceVoltageAlt2,
  .powerLevelMode = kLPADC_PowerLevelAlt4,
  .triggerPriorityPolicy = kLPADC_TriggerPriorityPreemptSubsequently,
  .enableConvPause = false,
  .convPauseDelay = 0UL,
  .FIFO0Watermark = 0UL,
  .FIFO1Watermark = 0UL
};
lpadc_conv_command_config_t ADC0_commandsConfig[1] = {
  {
    .sampleChannelMode = kLPADC_SampleChannelSingleEndSideB,
    .channelNumber = 0U,
    .chainedNextCommandNumber = 0,
    .enableAutoChannelIncrement = false,
    .loopCount = 0UL,
    .hardwareAverageMode = kLPADC_HardwareAverageCount128,
    .sampleTimeMode = kLPADC_SampleTimeADCK131,
    .hardwareCompareMode = kLPADC_HardwareCompareDisabled,
    .hardwareCompareValueHigh = 0UL,
    .hardwareCompareValueLow = 0UL,
    .conversionResolutionMode = kLPADC_ConversionResolutionHigh,
    .enableWaitTrigger = false
  }
};
lpadc_conv_trigger_config_t ADC0_triggersConfig[1] = {
  {
    .targetCommandId = 1,
    .delayPower = 0UL,
    .channelAFIFOSelect = 0,
    .channelBFIFOSelect = 0,
    .priority = 1,
    .enableHardwareTrigger = false
  }
};

static void ADC0_init(void) {
  /* Initialize LPADC converter */
  LPADC_Init(ADC0_PERIPHERAL, &ADC0_config);
  /* Perform offset calibration */
  LPADC_DoOffsetCalibration(ADC0_PERIPHERAL);
  /* Perform auto calibration */
  LPADC_DoAutoCalibration(ADC0_PERIPHERAL);
  /* Configure conversion command 1. */
  LPADC_SetConvCommandConfig(ADC0_PERIPHERAL, 1, &ADC0_commandsConfig[0]);
  /* Configure trigger 0. */
  LPADC_SetConvTriggerConfig(ADC0_PERIPHERAL, 0, &ADC0_triggersConfig[0]);
}

/***********************************************************************************************************************
 * FLEXCOMM1 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'FLEXCOMM1'
- type: 'flexcomm_i2c'
- mode: 'I2C_Interrupt'
- custom_name_enabled: 'false'
- type_id: 'flexcomm_i2c_c8597948f61bd571ab263ea4330b9dd6'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'FLEXCOMM1'
- config_sets:
  - interrupt:
    - interrupt_sources: 'kI2C_SlavePendingInterruptEnable kI2C_SlaveNotStretchingInterruptEnable kI2C_SlaveDeselectedInterruptEnable kI2C_MonitorReadyInterruptEnable
      kI2C_MonitorOverflowInterruptEnable kI2C_MonitorIdleInterruptEnable kI2C_EventTimeoutInterruptEnable kI2C_SclTimeoutInterruptEnable'
    - enable_irq: 'true'
    - interrupt:
      - IRQn: 'FLEXCOMM1_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
  - fsl_i2c:
    - i2c_mode: 'kI2C_Slave'
    - clockSource: 'FXCOMFunctionClock'
    - clockSourceFreq: 'BOARD_BootClockPLL150M'
    - i2c_slave_config:
      - enableSlave: 'true'
      - address0:
        - address: '0x12'
        - addressDisable: 'false'
      - qualMode: 'kI2C_QualModeMask'
      - qualAddress: '0'
      - address1:
        - address: '0'
        - addressDisable: 'true'
      - address2:
        - address: '0'
        - addressDisable: 'true'
      - address3:
        - address: '0'
        - addressDisable: 'true'
      - busSpeed: 'kI2C_SlaveStandardMode'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const i2c_slave_config_t FLEXCOMM1_config = {
  .enableSlave = true,
  .address0 = {
    .address = 0x12U,
    .addressDisable = false
  },
  .qualMode = kI2C_QualModeMask,
  .qualAddress = 0U,
  .address1 = {
    .address = 0U,
    .addressDisable = true
  },
  .address2 = {
    .address = 0U,
    .addressDisable = true
  },
  .address3 = {
    .address = 0U,
    .addressDisable = true
  },
  .busSpeed = kI2C_SlaveStandardMode
};

static void FLEXCOMM1_init(void) {
  /* Initialization function */
  I2C_SlaveInit(FLEXCOMM1_PERIPHERAL, &FLEXCOMM1_config, FLEXCOMM1_CLOCK_SOURCE);
  /* Enable interrupts */
  I2C_EnableInterrupts(FLEXCOMM1_PERIPHERAL, kI2C_SlavePendingInterruptEnable | kI2C_SlaveNotStretchingInterruptEnable | kI2C_SlaveDeselectedInterruptEnable | kI2C_MonitorReadyInterruptEnable | kI2C_MonitorOverflowInterruptEnable | kI2C_MonitorIdleInterruptEnable | kI2C_EventTimeoutInterruptEnable | kI2C_SclTimeoutInterruptEnable);
  /* Enable interrupt FLEXCOMM1_IRQn request in the NVIC. */
  EnableIRQ(FLEXCOMM1_FLEXCOMM_IRQN);
}

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/
void BOARD_InitPeripherals(void)
{
  /* Initialize components */
  FLEXCOMM0_init();
  ADC0_init();
  FLEXCOMM1_init();
}

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void)
{
  BOARD_InitPeripherals();
}
